# vim: noai:ts=2:sw=2:et
---

#
# Build Docker compute instance
#

      - block:
        - name: "Delete the old app if it exists"
          os_server:
            name: "{{ item }}"
            state: absent
            region_name: "{{ region.name }}"
            availability_zone: "{{ region.az }}"
            wait: yes
            timeout: 120
          with_sequence: start=1 end="{{ servers.apps.count }}" format="{{ servers.apps.name }}%02x"
          register: k5_server
          async: 7200
          poll: 0

        - name: Wait for instance deletion to complete
          async_status: jid={{ item.ansible_job_id }}
          register: k5_jobs
          until: k5_jobs.finished
          retries: 300
          delay: 5
          with_items: "{{ k5_server.results }}"

        tags: delete_docker_servers


      - block:

        - name: "Create the docker server"
        # autoip must be no - k5 doesnt allow it at build time
          os_server:
            name: "{{ item }}"
            state: present
            region_name: "{{ region.name }}"
            availability_zone: "{{ region.az }}"
            image: "{{ servers.apps.image }}"
            flavor: "{{ servers.apps.flavor }}"
            key_name: "{{ region.ssh_keypair }}"
            network: "{{ servers.apps.network }}"  # not needed if we supply nics (ie. pre created ports)
            security_groups: [ "{{ servers.apps.security_group }}" ] # not needed if we supply nics (ie. pre created ports)
            volume_size: "{{ servers.apps.volume_size }}"
            boot_from_volume: yes
            terminate_volume: yes
            auto_ip: no
            meta:
              # group has to be a string
              group: "docker"
              key_name: "{{ region.ssh_keypair }}" 
              image: "{{ servers.apps.image }}"
  #          userdata: |
  #            #!/bin/bash
  #            echo "********************************** Upgrade OS"
  #            apt update
  #            apt -y dist-upgrade
  #            echo "********************************** Setup docker repo"
  #            apt-get -y install curl linux-image-extra-$(uname -r) linux-image-extra-virtual apt-transport-https ca-certificates 
  #            curl -fsSL https://yum.dockerproject.org/gpg | sudo apt-key add -
  #            add-apt-repository "deb https://apt.dockerproject.org/repo/ ubuntu-$(lsb_release -cs) main"
  #            apt-get update
  #            echo "********************************** Install docker-engine"
  #            apt-get -y install docker-engine
  #            echo "********************************** Test docker-engine"
  #            docker run hello-world >/tmp/docker-test.log

                    
          register: k5_server
          with_sequence: start=1 end="{{ servers.apps.count }}" format="{{ servers.apps.name }}%02x"
          async: 7200
          poll: 0
   
        - name: Wait for instance creation to complete
          async_status: jid={{ item.ansible_job_id }}
          register: k5_jobs
          until: k5_jobs.finished
          retries: 300
          delay: 10
          with_items: "{{ k5_server.results }}"

        
        - name: "Get OpenStack facts on the servers we just built"
          os_server_facts:
            server: "{{ servers.apps.name }}*"
          register: k5_server

        - debug: msg="{{ item.name }} = {{ item.private_v4 }}"
          with_items: "{{ k5_server.ansible_facts.openstack_servers }}"

  #"
  #      - fail: msg="stop"

        - block:
      
          - set_fact: 
              docker_sorted: "{{ k5_server.ansible_facts.openstack_servers | sort(attribute='name') }}"

          - name: "docker_engine - add to the running inventory the instance created above"
            add_host: 
              hostname: "{{ item.name }}"
              groupname: "docker_engine"
            with_items: "{{ docker_sorted }}"

          - name: "docker_swarm_manager - add to the running inventory the instance created above"
            add_host: 
              hostname: "{{ item.name }}"
              groupname: "docker_swarm_manager"
            with_items: 
              - "{{ docker_sorted | first }}"

          - name: "docker_swarm_worker - add to the running inventory the instance created above"
            add_host: 
              hostname: "{{ item.name }}"
              groupname: "docker_swarm_worker"
            with_items: 
              - "{{ docker_sorted[1:] }}"

          #
          # we have to use a separate inventory file per group, otherwise lineinfile regex overwrites
          #
          - name: "docker_engine - Add to the local host group (located inside the directory)"
            local_action: lineinfile 
              dest="inventory/docker_engine" 
              regexp="{{ item.name }}"
              insertafter="[docker_engine]" 
              line="{{ item.name }} ansible_host={{ item.private_v4 }} ansible_user={{ servers.apps.ansible_user }} ansible_connection={{ servers.apps.ansible_connection }}"
  #"
            with_items: "{{ docker_sorted }}"

          - name: "docker_swarm_manager - Add to the local host group (located inside the directory)"
            local_action: lineinfile 
              dest="inventory/docker_swarm_manager" 
              regexp="{{ item.name }}"
              insertafter="[docker_swarm_manager]" 
              line="{{ item.name }} ansible_host={{ item.private_v4 }} ansible_user={{ servers.apps.ansible_user }} ansible_connection={{ servers.apps.ansible_connection }}"
  #"
            with_items: 
              - "{{ docker_sorted | first }}"

          - name: "docker_swarm_worker - Add to the local host group (located inside the directory)"
            local_action: lineinfile 
              dest="inventory/docker_swarm_worker" 
              regexp="{{ item.name }}"
              insertafter="[docker_swarm_worker]" 
              line="{{ item.name }} ansible_host={{ item.private_v4 }} ansible_user={{ servers.apps.ansible_user }} ansible_connection={{ servers.apps.ansible_connection }}"
  #"
            with_items: 
              - "{{ docker_sorted[1:] }}"


          - include: includes/mail-provision-success.yml
            with_items: "{{ k5_server.ansible_facts.openstack_servers }}"

          when: k5_server.ansible_facts.openstack_servers is defined

        tags: t_create_docker_instance


